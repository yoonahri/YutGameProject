#include "gameevent.h"

GameEvent::GameEvent()
{
    //보드의 번호 별 도/개/걸/윷/모/빽도 에 맞는 갈 수 있는 곳 지정
    this->movable_pos =  {
        { {19}, {1}, {2}, {3}, {4}, {5} },
        { {0}, {2}, {3}, {4}, {5}, {6} },
        { {1}, {3}, {4}, {5}, {6}, {7} },
        { {2}, {4}, {5}, {6}, {7}, {8} },
        { {3}, {5}, {6}, {7}, {8}, {9} },
        { {4}, {6, 20}, {7, 21}, {8, 22}, {9, 23}, {10, 24} },
        { {5}, {7}, {8}, {9}, {10}, {11} },
        { {6}, {8}, {9}, {10}, {11}, {12} },
        { {7}, {9}, {10}, {11}, {12}, {13} },
        { {8}, {10}, {11}, {12}, {13}, {14} },
        { {9}, {11, 25}, {12, 26}, {13, 27}, {14, 28}, {15, 29} },
        { {10}, {12}, {13}, {14}, {15}, {16} },
        { {11}, {13}, {14}, {15}, {16}, {17} },
        { {12}, {14}, {15}, {16}, {17}, {18} },
        { {13}, {15}, {16}, {17}, {18}, {19} },
        { {14}, {16}, {17}, {18}, {19}, {30} },
        { {15}, {17}, {18}, {19}, {30}, {30} },
        { {16}, {18}, {19}, {30}, {30}, {30} },
        { {17}, {19}, {30}, {30}, {30}, {30} },
        { {18}, {30}, {30}, {30}, {30}, {30} },
        { {5}, {21}, {22}, {23}, {24}, {15} },
        { {20}, {22}, {23}, {24}, {15}, {16} },
        { {26}, {23, 28}, {24, 29}, {15, 30}, {16, 30}, {17, 30} },
        { {22}, {24}, {15}, {16}, {17}, {18} },
        { {23}, {15}, {16}, {17}, {18}, {19} },
        { {10}, {26}, {27}, {28}, {29}, {30} },
        { {25}, {27}, {28}, {29}, {30}, {30} },
        { {26}, {23, 28}, {24, 29}, {15, 30}, {16, 30}, {17, 30} },
        { {27}, {29}, {30}, {30}, {30}, {30} },
    };

    /*
    //벡터에 잘 들어갔는지 확인용, 삭제 예정
    for(int i = 0 ; i < 29 ; i++){
        for(int j = 0 ; j < 6 ; j++){
            for(auto m = this->movable_pos[i][j].begin() ; m != movable_pos[i][j].end() ; m++ ){
                cout<< *m<< "   ";
            }
        }
        cout<<i<<"번째 벡터";
        cout<<endl;
    }
    */
}


void GameEvent::highlightMovablePos(int num_of_board, int num_of_yut){
    /*
     * gui부분
     * this->movable_pos[num_of_board][num_of_yut]벡터에 접근
     * 벡터 안의 원소를 highlight
     */
}

bool GameEvent::IsMovablePos(int num_of_board_init, int num_of_yut, int num_of_board_des){
    for(auto m = this->movable_pos[num_of_board_init][num_of_yut].begin()
        ; m != movable_pos[num_of_board_init][num_of_yut].end() ; m++ ){
        if(*m == num_of_board_des){
            return true;
        }
        else{
            return false;
        }
    }
}
